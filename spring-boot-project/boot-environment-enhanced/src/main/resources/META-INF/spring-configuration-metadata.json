{
	"groups": [
		{
			"name": "easyj.crypto",
			"description": "EasyJ定义的全局加解密算法配置组."
		}
	],
	"properties": [
		{
			"name": "easyj.env.standard-env",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "手动配置标准环境代码.",
			"defaultValue": "prod"
		},
		{
			"name": "easyj.env.standard-env-list",
			"type": "java.util.List<java.lang.String>",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "标准环境代码列表，用于自动根据环境代码匹配标准环境代码.",
			"defaultValue": [
				"prod",
				"sandbox",
				"test",
				"dev"
			]
		},
		{
			"name": "easyj.env.default-standard-env",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "默认的标准环境代码，当没有匹配到时，使用该值作为标准环境代码.",
			"defaultValue": "${easyj.env.standard-env-list[0]}"
		},
		{
			"name": "easyj.config.activate.on-class",
			"type": "java.util.List<java.lang.Class>",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.impls.OnClassConditionPropertySourceFilter",
			"description": "配置源过滤器接口实现：基于OnClass条件判断."
		},
		{
			"name": "easyj.config.activate.on-any-class",
			"type": "java.util.List<java.lang.Class>",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.impls.OnAnyClassConditionPropertySourceFilter",
			"description": "配置源过滤器接口实现：基于OnAnyClass条件判断."
		},
		{
			"name": "easyj.crypto.asymmetric-crypto.algorithm",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的非对称加密算法."
		},
		{
			"name": "easyj.crypto.asymmetric-crypto.private-key",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的非对称加密算法密钥."
		},
		{
			"name": "easyj.crypto.asymmetric-crypto.public-key",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的非对称加密算法公钥."
		},
		{
			"name": "easyj.crypto.symmetric-crypto.algorithm",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的对称加密算法."
		},
		{
			"name": "easyj.crypto.symmetric-crypto.key",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的对称加密算法密钥."
		},
		{
			"name": "easyj.crypto.symmetric-crypto.iv",
			"type": "java.lang.String",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的对称加密算法偏移向量."
		},
		{
			"name": "easyj.crypto.symmetric-crypto.charset",
			"type": "java.nio.charset.Charset",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.EasyjAppointedEnvironmentPostProcessor",
			"description": "全局的对称加密算法编码.",
			"defaultValue": "UTF-8"
		},
		{
			"name": "easyj.class.isExist",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.ClassPropertyUtils",
			"description": "函数式配置${xxx}：判断类是否存在的方法，返回：true|false，例：${easyj.class.isExist('类名1', '类名2', ..., '类名n')}."
		},
		{
			"name": "easyj.class.getExistingOne",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.ClassPropertyUtils",
			"description": "函数式配置${xxx}：获取存在类的类名的方法，根据优先级设置类名顺序，例：${easyj.class.getExistingOne('类名1', '类名2', ..., '类名n')}."
		},
		{
			"name": "easyj.crypto.decrypt",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.CryptoPropertyUtils",
			"description": "函数式配置${xxx}：解密方法，例：${easyj.crypto.decrypt('xxxxxx这里是一个加密串')}."
		},
		{
			"name": "easyj.net.getIp",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.NetPropertyUtils",
			"description": "函数式配置${xxx}：获取第一张网卡IP的方法，例：${easyj.net.getIp()}."
		},
		{
			"name": "easyj.net.matchIp",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.NetPropertyUtils",
			"description": "函数式配置${xxx}：网卡IP匹配的方法，例：${easyj.net.matchIp('10.10.10.*', '192.168.10.*')}."
		},
		{
			"name": "easyj.random",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：同${easyj.random.uuid32}，唯一用法：${easyj.random}."
		},
		{
			"name": "easyj.random.uuid32",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机生成32位UUID的方法，唯一用法：${easyj.random.uuid32}."
		},
		{
			"name": "easyj.random.uuid",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机生成完整UUID的方法，唯一用法：${easyj.random.uuid}."
		},
		{
			"name": "easyj.random.port",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机生成未被占用的端口号的方法，例：${easyj.random.port(2000, 3000)}."
		},
		{
			"name": "easyj.random.short",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机生成短整形数字的方法，例：${easyj.random.short(2000, 3000)}."
		},
		{
			"name": "easyj.random.int",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机生成整形数字的方法，例：${easyj.random.int(2000, 3000)}."
		},
		{
			"name": "easyj.random.long",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机生成长整形数字的方法，例：${easyj.random.long(2000L, 3000L)}."
		},
		{
			"name": "easyj.random.choose",
			"type": "java.lang.reflect.Method",
			"sourceType": "icu.easyj.spring.boot.env.enhanced.util.RandomPropertyUtils",
			"description": "函数式配置${xxx}：随机选取一个值的方法，例：${easyj.random.port('1', '2', '3', '4')}."
		},
		{
			"name": "easyj.datasource.mysql.driver-class-name",
			"type": "java.lang.Class<java.sql.Driver>",
			"description": "可引用配置：MySQL驱动类名.",
			"defaultValue": "自动选择：com.mysql.cj.jdbc.Driver 或 com.mysql.jdbc.Driver"
		},
		{
			"name": "easyj.datasource.oracle.driver-class-name",
			"type": "java.lang.Class<java.sql.Driver>",
			"description": "可引用配置：Oracle驱动类名.",
			"defaultValue": "自动选择：oracle.jdbc.OracleDriver 或 oracle.jdbc.driver.OracleDriver"
		},
		{
			"name": "easyj.datasource.mssql.driver-class-name",
			"type": "java.lang.Class<java.sql.Driver>",
			"description": "可引用配置：MS SQL Server驱动类名.",
			"defaultValue": "com.microsoft.sqlserver.jdbc.SQLServerDriver"
		}
	],
	"hints": [
		{
			"name": "easyj.crypto.asymmetric-crypto.algorithm",
			"values": [
				{
					"value": "RSA",
					"description": "非对称加密算法（提出者：Ron Rivest、Adi Shamir、Leonard Adleman）."
				},
				{
					"value": "RSA\/ECB\/PKCS1Padding",
					"description": "非对称加密算法."
				},
				{
					"value": "RSA\/ECB\/NoPadding",
					"description": "非对称加密算法."
				},
				{
					"value": "RSA\/None\/NoPadding",
					"description": "非对称加密算法."
				},
				{
					"value": "ECIES",
					"description": "非对称加密算法（集成加密方案，Elliptic Curve Integrate Encrypt Scheme）."
				}
			],
			"providers": [
				{
					"name": "any"
				}
			]
		},
		{
			"name": "easyj.crypto.symmetric-crypto.algorithm",
			"values": [
				{
					"value": "AES\/CBC\/PKCS7Padding",
					"description": "对称加密算法."
				},
				{
					"value": "AES\/ECB\/PKCS5Padding",
					"description": "对称加密算法."
				},
				{
					"value": "DES\/ECB\/PKCS5Padding",
					"description": "对称加密算法."
				},
				{
					"value": "DESede\/CBC\/PKCS5Padding",
					"description": "对称加密算法."
				},
				{
					"value": "DESede\/ECB\/PKCS5Padding",
					"description": "对称加密算法."
				},
				{
					"value": "SM4\/ECB\/PKCS5Padding",
					"description": "对称加密算法."
				}
			],
			"providers": [
				{
					"name": "any"
				}
			]
		}
	]
}